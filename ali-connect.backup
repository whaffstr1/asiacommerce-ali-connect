<?php

/**

 * @package Ali_Connect

 * @version 1.2

 */



/*

Plugin Name: Ali Connect

Description: AsiaCommerce Logistic Integration Plugin for WooCommerce.

Version: 1.2

Author: Asia Commerce Networks Limited

Author URI: https://asiacommerce.net/

*/



require_once 'checker.php';

require_once 'fibu-helper.php';

require_once ABSPATH . 'wp-admin/includes/upgrade.php';

require_once ABSPATH . 'wp-admin/includes/plugin.php';



class Ali_Connect_Wordpress

{

    protected $checker;

    protected $fibu;

    protected static $version = '1.2';



    public function __construct()

    {

        $this->checker = new ALI_Connect_Checker();

        $this->fibu = new AliFibuHelper();

    }



    public static function install()

    {

        add_option('ali_connect_version', static::$version);

    }



    public function return_personalised_catalog_data_to_api($product, $post, $request)

    {

        $product_id = $product->data['id'];

        $customer_id = $request['customer_id'];



        // Get customer-specific price from database table



        return $product;

    }



    public function init()

    {

        if (is_plugin_active('woocommerce/woocommerce.php')) {

            add_action('wp_enqueue_scripts', 'enqueue_load_fa');

            add_action('woocommerce_before_cart_contents', array($this, 'showProductDeliveryTimeCart'), 10);

            add_action('woocommerce_checkout_before_order_review', array($this, 'showProductDeliveryTimeCart'), 10);

            add_action('woocommerce_thankyou', array($this, 'showProductDeliveryTimeCart'), 10);



            add_action('woocommerce_single_product_summary', array($this, 'addProductDeliveryTime'), 10);

            add_action('woocommerce_webhook_delivery', array($this, 'handleWebhookFromALI'), 10, 5);

            add_action('woocommerce_rest_insert_product_object', array($this, 'decorateProductResponse'), 10, 3);



            $this->checker->init();

        } else {

            add_action('admin_notices', array($this, 'wooCommerceNotActivated'));

        }

    }



    public function enqueue_load_fa()

    {

        wp_enqueue_style('load-fa', 'https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css');

    }



    public function decorateProductResponse($object, $request, $create)

    {

        $importFrom = $request->get_param('import_from');

        

        if (null !== $importFrom && $importFrom === 'ali') {

            $id = $object->get_id();

            

            $metaData = $request->get_param('meta_data');



			add_post_meta($id, 'ali__meta_data', $metaData, true);

            $this->saveOrUpdateAliProduct($id);

        }

        return $response;

    }





    public function saveOrUpdateAliProduct($id)

    {

        if (!$this->checker->isALIProduct($id)) {

            add_post_meta($id, 'ali__is_ali_product', true, true);

        }

    }



    public function handleWebhookFromALI($http_args, $response, $duration, $arg, $this_id)

    {

        $this->handleProductPush();

        $this->handleProductUnpush();

    }



    public function handleProductPush()

    {

        // Add product to our table if it's comes from ALI

    }



    public function handleProductUnpush()

    {

        // Remove product from our table when unpushed from ALI

    }



    public function wooCommerceNotActivated()

    {

        echo "<div class='error notice'><p>" .

            "WooCommerce is not activated yet." .

        "</p></div>";

    }



    public static function aliConnectActivated()

    {

        echo "<div class='updated notice'><p>" .

            "Ali Connect is activated." .

        "</p></div>";

    }



    public function addProductDeliveryTime($id)

    {

        global $product;



        if ($this->checker->isALIProduct($product->get_id())) {

            $this->showProductDeliveryTime($product->get_id());

        }

    }

    

    public function showProductDeliveryTime($d = null)

    {

        $format = get_option('date_format');

        $day = 24 * 60 * 60;

        $startDate = date($format, time() + (14 * $day));

        $endDate = date($format, time() + (21 * $day));



        echo "<div style='background: #eeeeee; padding: 12px;'>" .

            "<p style='font-weight: 300'><i class='fa fa-plane'></i> Goods shipped from China.</p>" .

            "<h4 style='margin-top: 0; padding-top: 0'>Estimated Delivery Time</h4>" .

            "<span>Retail order delivery within 10-18 days.<br></span>" .

            "<span>Wholesale order delivery within 30 days.</span>" .

            "<!--<span>{$startDate} - {$endDate}</span>-->" .

            "</div>";

    }

    

    public function showProductDeliveryTimeCart($d)

    {

        $valid = false;

        if ($d === null || $d === '') {

            if ($this->checker->cartHasALIProduct()) {

                $valid = true;

            }

        } else {

            if ($this->checker->orderHasALIProduct($d)) {

                $valid = true;

            }

        }

        

        if ($valid) {

            $format = get_option('date_format');

            $day = 24 * 60 * 60;

            $startDate = date($format, time() + (14 * $day));

            $endDate = date($format, time() + (21 * $day));



            echo "<div style='background: #ededed; padding: 12px;'>" .

                "<p style='font-weight: 300'><i class='fa fa-plane'></i> Some of these products will be sent from abroad, You have to wait until it comes to Indonesia.</p>" .

                "<h4 style='margin-top: 0; padding-top: 0'>Estimated Delivery Time</h4>" .

                "<span>{$startDate} - {$endDate}</span>" .

                "</div>";

        }

    }

}



$aliConnectWordpress = new Ali_Connect_Wordpress();



$aliConnectWordpress->init();



function Ali_Connect_Install()

{

    return Ali_Connect_Wordpress::install();

}


register_activation_hook(__FILE__, 'Ali_Connect_Install');

/**
 * @package   Pointer Wordpress
 * @author    OnlineStore ID
 * @license   GPL-3.0+
 * @link      https://onlinestore.id
 * @copyright 2019 GPL
 */

/**
 * Super pointer creation for WP Admin
 */
class PointerPlus {

  /**
   * Prefix strings like styles, scripts and pointers IDs
   * @var string
   */
  var $prefix = 'pointerplus';
  var $pointers = array();

  /**
   * Construct the class parameter
   * 
   * @param array $args Parameters of class.
   * @return void
   */
  function __construct( $args = array() ) {
    if ( isset( $args[ 'prefix' ] ) ) {
	$this->prefix = $args[ 'prefix' ];
    }
    add_action( 'current_screen', array( $this, 'maybe_add_pointers' ) );
  }

  /**
   * Set pointers and its options
   *
   * @since 1.0.0
   */
  function initial_pointers() {
    global $pagenow;
    $defaults = array(
	  'class' => '',
	  'width' => 300, //only fixed value
	  'align' => 'middle',
	  'edge' => 'left',
	  'post_type' => array(),
	  'pages' => array(),
	  'icon_class' => ''
    );
    $screen = get_current_screen();
    $current_post_type = isset( $screen->post_type ) ? $screen->post_type : false;
    $search_pt = false;

    $pointers = apply_filters( $this->prefix . '-pointerplus_list', array(
		// Pointers are added through the 'initial_pointerplus' filter
		), $this->prefix );

    foreach ( $pointers as $key => $pointer ) {
	$pointers[ $key ] = wp_parse_args( $pointer, $defaults );
	$search_pt = false;
	// Clean from null ecc
	$pointers[ $key ][ 'post_type' ] = array_filter( $pointers[ $key ][ 'post_type' ] );
	if ( !empty( $pointers[ $key ][ 'post_type' ] ) ) {
	  if ( !empty( $current_post_type ) ) {
	    if ( is_array( $pointers[ $key ][ 'post_type' ] ) ) {
		// Search the post_type
		foreach ( $pointers[ $key ][ 'post_type' ] as $value ) {
		  if ( $value === $current_post_type ) {
		    $search_pt = true;
		  }
		}
		if ( $search_pt === false ) {
		  unset( $pointers[ $key ] );
		}
	    } else {
		new WP_Error( 'broke', __( 'PointerPlus Error: post_type is not an array!' ) );
	    }
	    // If not in CPT view remove all the pointers with post_type
	  } else {
	    unset( $pointers[ $key ] );
	  }
	}
	// Clean from null ecc
	if ( isset( $pointers[ $key ][ 'pages' ] ) ) {
	  if ( is_array( $pointers[ $key ][ 'pages' ] ) ) {
	    $pointers[ $key ][ 'pages' ] = array_filter( $pointers[ $key ][ 'pages' ] );
	  }
	  if ( !empty( $pointers[ $key ][ 'pages' ] ) ) {
	    if ( is_array( $pointers[ $key ][ 'pages' ] ) ) {
		// Search the page
		foreach ( $pointers[ $key ][ 'pages' ] as $value ) {
		  if ( $pagenow === $value ) {
		    $search_pt = true;
		  }
		}
		if ( $search_pt === false ) {
		  unset( $pointers[ $key ] );
		}
	    } else {
		new WP_Error( 'broke', __( 'PointerPlus Error: pages is not an array!' ) );
	    }
	  }
	}
    }

    return $pointers;
  }

  /**
   * Check that pointers haven't been dismissed already. If there are pointers to show, enqueue assets.
   * 
   * @since 1.0.0
   */
  function maybe_add_pointers() {
    // Get default pointers that we want to create
    $default_keys = $this->initial_pointers();

    // Get pointers dismissed by user
    $dismissed = explode( ',', get_user_meta( get_current_user_id(), 'dismissed_wp_pointers', true ) );

    // Check that our pointers haven't been dismissed already
    $diff = array_diff_key( $default_keys, array_combine( $dismissed, $dismissed ) );

    // If we have some pointers to show, save them and start enqueuing assets to display them
    if ( !empty( $diff ) ) {
	$this->pointers = $diff;
	add_action( 'admin_enqueue_scripts', array( $this, 'admin_enqueue_assets' ) );

	foreach ( $diff as $pointer ) {
	  if ( isset( $pointer[ 'phpcode' ] ) ) {
	    add_action( 'admin_notices', $pointer[ 'phpcode' ] );
	  }
	}
    }
    $this->pointers[ 'l10n' ] = array( 'next' => __( 'Next' ) );
  }

  /**
   * Enqueue pointer styles and scripts to display them.
   *
   * @since 1.0.0
   */
  function admin_enqueue_assets() {
    $base_url = plugins_url( '', __FILE__ );
    wp_enqueue_style( $this->prefix, $base_url . '/pointerplus.css', array( 'wp-pointer' ) );
    wp_enqueue_script( $this->prefix, $base_url . '/pointerplus.js?var=' . str_replace( '-', '_', $this->prefix ) . '_pointerplus', array( 'wp-pointer' ) );
    wp_localize_script( $this->prefix, str_replace( '-', '_', $this->prefix ) . '_pointerplus', apply_filters( $this->prefix . '_pointerplus_js_vars', $this->pointers ) );
  }

  /**
   * Reset pointer
   *
   * @since 1.0.0
   */
  function reset_pointer() {
    add_action( 'current_screen', array( $this, '_reset_pointer' ), 0 );
  }

  /**
   * Reset pointer in hook
   *
   * @since 1.0.0
   */
  function _reset_pointer( $id = 'me' ) {
    if ( $id === 'me' ) {
	$id = get_current_user_id();
    }
    $pointers = explode( ',', get_user_meta( $id, 'dismissed_wp_pointers', true ) );
    foreach ( $pointers as $key => $pointer ) {
	if ( strpos( $pointer, $this->prefix ) === 0 ) {
	  unset( $pointers[ $key ] );
	}
    }
    $meta = implode( ',', $pointers );

    update_user_meta( get_current_user_id(), 'dismissed_wp_pointers', $meta );
  }

}
